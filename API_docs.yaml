openapi: 3.0.1
info:
  description: API documentation for team C3C5's resource catalogue
  version: 1.0.0
  title: Resource Catalogue
servers:
  - url: c3c5-resource-catalogue.herokuapp.com
tags:
  - name: comments
    description: Everything about the comments on resources
  - name: tag
    description: Everything about the resource tags
  - name: resources
    description: Everything about the resources
  - name: users
    description: Everything about users
  - name: study list
    description: Everything about the to-study-list

paths:
  /comments/{resourceId}:
    post:
      tags:
        - comments
      summary: add a comment to a specific resource
      operationId: postComments
      parameters:
        - in: path
          name: resourceId
          description: ID of the resource to add comment to
          required: true
          schema:
            type: "integer"
            minimum: 1
      requestBody:
        description: "adding a new comment to the resource"
        required: true
        content:
          application/json:
            schema:
              required:
                - userId
                - liked
                - comment
              type: object
              properties:
                userId:
                  type: integer
                liked:
                  type: boolean
                comment:
                  type: string
              example:
                {
                  "userId": 1,
                  "liked": true,
                  "comment": "Great recommendation!",
                }
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: One user cannot leave more than one comment on a single resource
        "404":
          description: Not found
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: Resource not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        user_id:
                          type: integer
                          minimum: 1
                        resource_id:
                          type: integer
                          minimum: 1
                        liked:
                          type: boolean
                        comment:
                          type: string
                example:
                  status: success
                  data:
                    - id: 2
                      user_id: 1
                      resource_id: 1
                      liked: true
                      comment: Thanks for sharing!

    get:
      tags:
        - comments
      summary: return all comments on a given resource
      operationId: getComments
      parameters:
        - in: path
          name: resourceId
          description: ID of the resource to find comments from
          required: true
          schema:
            type: "integer"
            minimum: 1
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: resource not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        liked:
                          type: boolean
                        comment:
                          type: string
                        name:
                          type: string
                        user_id:
                          type: integer
                          minimum: 1
                          maximum: 100
                example:
                  status: success
                  data:
                    - id: 2
                      liked: true
                      comment: Thanks for sharing!
                      name: Veta
                      user_id: 4
                    - id: 1
                      liked: true
                      comment: Oh wow that is nice!
                      name: Jo
                      user_id: 5
  /users:
    get:
      tags:
        - "users"
      summary: "Return all users"
      description: "List of users that can add resources"
      operationId: "getUsers"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        name:
                          type: string
                        is_faculty:
                          type: boolean
                example:
                  {
                    "status": "success",
                    "data":
                      [
                        { "id": 1, "name": "Richard", "is_faculty": true },
                        { "id": 2, "name": "Neill", "is_faculty": true },
                        { "id": 3, "name": "Linus", "is_faculty": false },
                        { "id": 4, "name": "Veta", "is_faculty": false },
                      ],
                  }
        "404":
          description: "When the table 'users' is not found"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: object
                    properties:
                      length:
                        type: integer
                        minimum: 105
                        maximum: 105
                      name:
                        type: string
                      severity:
                        type: string
                      code:
                        type: string
                      position:
                        type: string
                      file:
                        type: string
                      line:
                        type: string
                      routine:
                        type: string
                example:
                  status: failed
                  message:
                    length: 105
                    name: error
                    severity: ERROR
                    code: 42P01
                    position: "15"
                    file: parse_relation.c
                    line: "1180"
                    routine: parserOpenTable

  /to-study-list/{userId}:
    get:
      tags:
        - study list
      summary: "Returns the study list of an individual user"
      description: "The list of a user's favourited resources"
      operationId: "getStudyListForUser"
      parameters:
        - in: path
          name: userId
          description: ID of user to return their study list
          required: true
          schema:
            type: "integer"
            minimum: 1
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        resource_name:
                          type: string
                        author_name:
                          type: string
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                minimum: 1
                              name:
                                type: string

                example:
                  {
                    "status": "success",
                    "data":
                      [
                        {
                          "id": 2,
                          "resource_name": "JavaScript tutorial",
                          "author_name": "CodeCademy",
                          "tags":
                            [
                              { id: 3, name: "Javascript" },
                              { id: 4, name: "HTML" },
                            ],
                        },
                        {
                          "id": 1,
                          "resource_name": "react tutorial",
                          "author_name": "freeCodeCamp",
                          "tags":
                            [
                              { id: 1, name: "React" },
                              { id: 2, name: "TypeScript" },
                            ],
                        },
                      ],
                  }

        "404":
          description: "When the user ID is not found"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: User ID 100 does not exist.

    post:
      tags:
        - study list
      summary: "Adds to the study list of an individual user"
      description: ""
      operationId: "addItemToStudyList"
      parameters:
        - in: path
          name: userId
          description: ID of user to return their study list
          required: true
          schema:
            type: "integer"
            minimum: 1
      requestBody:
        description: "adding a new item to the specific users study list"
        required: true
        content:
          application/json:
            schema:
              required:
                - resource_id
              type: object
              properties:
                resource_id:
                  type: integer
              example: { "resourceId": 1 }
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user_id:
                          type: integer
                        resource_id:
                          type: integer
                example:
                  {
                    "status": "success",
                    "data": [{ "id": 1, "user_id": 3, "resource_id": 1 }],
                  }
        "405":
          description: "When the resource already exists in the user's to-study list"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

                example:
                  {
                    "status": "failed",
                    "message": "Resource is already in the to-study list.",
                  }
        "404":
          description: "When the user ID is not found"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: User ID 100 does not exist.
  /to-study-list/{userId}/{resourceId}:
    delete:
      tags:
        - study list
      summary: "Delete an item from study list for an individual user"
      description: ""
      operationId: "DeleteItemInStudyList"
      parameters:
        - in: path
          name: userId
          description: ID of user to delete an item from their study list
          required: true
          schema:
            type: "integer"
            minimum: 1
        - in: path
          name: resourceId
          description: ID of resource to be deleted
          required: true
          schema:
            type: "integer"
            minimum: 1
      # requestBody:
      #   description: "removing an item to the specific users study list"
      #   required: true
      #   content:
      #     application/json:
      #       schema:
      #         required:
      #           - resource_id
      #         type: object
      #         properties:
      #           resource_id:
      #             type: integer
      #         example: { "resourceId": 1 }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user_id:
                          type: integer
                        resource_id:
                          type: integer
                example:
                  {
                    "status": "success",
                    "data": [{ "id": 4, "user_id": 3, "resource_id": 1 }],
                  }
        "405":
          description: "When the resource ID does not exist in the user's to-study list"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  { "status": "failed", "message": "Resource not found." }
        "404":
          description: "When the user ID is not found"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: User ID 100 does not exist.
  /tags/{resourceId}:
    get:
      tags:
        - tag
      summary: Get tags for a single resource
      operationId: getTagByResourceId
      parameters:
        - in: path
          name: resourceId
          description: ID of the resource to find comments from
          required: true
          schema:
            type: "integer"
            minimum: 1
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: Resource not found.
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        name:
                          type: string
                example:
                  status: success
                  data:
                    [
                      { id: 1, name: HTML },
                      { id: 2, name: CSS },
                      { id: 3, name: React },
                    ]
  /tags:
    get:
      tags:
        - tag
      summary: Get all the tags in the database
      operationId: getTags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        name:
                          type: string
                example:
                  status: success
                  data:
                    [
                      { id: 1, name: HTML },
                      { id: 2, name: CSS },
                      { id: 3, name: React },
                    ]
        "404":
          description: "When the table 'tags' is not found"
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: object
                    properties:
                      length:
                        type: integer
                        minimum: 105
                        maximum: 105
                      name:
                        type: string
                      severity:
                        type: string
                      code:
                        type: string
                      position:
                        type: string
                      file:
                        type: string
                      line:
                        type: string
                      routine:
                        type: string
                example:
                  status: failed
                  message:
                    length: 105
                    name: error
                    severity: ERROR
                    code: 42P01
                    position: "15"
                    file: parse_relation.c
                    line: "1180"
                    routine: parserOpenTable
  /resources:
    get:
      tags:
        - resources
      summary: Get all the resources in the database with their tags and likes
      operationId: getResources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        resource_name:
                          type: string
                        author_name:
                          type: string
                        creation_date:
                          type: string
                        description:
                          type: string
                        url:
                          type: string
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                minimum: 1
                              name:
                                type: string
                        likes:
                          type: integer
                        dislikes:
                          type: integer
                example:
                  status: success
                  data:
                    [
                      {
                        id: 1,
                        resource_name: Javascript tutorial,
                        author_name: Codecademy,
                        creation_date: "2022-01-05T16:58:27.622Z",
                        tags: [{ id: 4, name: Javascript }],
                        likes: 9,
                        dislikes: 2,
                      },
                      {
                        id: 2,
                        resource_name: Typescript tutorial,
                        author_name: Edabit,
                        creation_date: "2022-01-05T18:51:57.622Z",
                        tags: [{ id: 5, name: Typescript }],
                        likes: 5,
                        dislikes: 1,
                      },
                    ]
    post:
      tags:
        - resources
      summary: Post a new resource to the databases of resources, with a non-duplicate url
      operationId: postResource
      requestBody:
        description: A request body containing resource name, author name, url, description, content type, week number, recommender's id, recommendation status, and recommendation message
        required: true
        content:
          application/json:
            schema:
              required:
                - resource_name
                - author_name
                - url
                - description
                - content_type
                - week_no
                - recommender_id
                - rec_status
                - rec_message
                - tags
              type: object
              properties:
                resource_name:
                  type: string
                author_name:
                  type: string
                url:
                  type: string
                description:
                  type: string
                content_type:
                  type: string
                week_no:
                  type: integer
                  minimum: 1
                  maximum: 10
                recommender_id:
                  type: integer
                  minimum: 1
                rec_status:
                  type: string
                rec_message:
                  type: string
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        minimum: 1
                      name:
                        type: string
              example:
                resource_name: JavaScript tutorial
                author_name: CodeCademy
                url: https://www.codecademy.com/learn/
                description: a tutorial
                content_type: interactive
                week_no: 1
                recommender_id: 4
                rec_status: I haven't used this resource but it looks promising
                rec_message: great stuff
                tags: [{ id: 1, name: HTML }]
      responses:
        "405":
          description: Method not allowed
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: there is already a resource with that url
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        resource_name:
                          type: string
                        author_name:
                          type: string
                        url:
                          type: string
                        description:
                          type: string
                        content_type:
                          type: string
                        week_no:
                          type: integer
                          minimum: 1
                          maximum: 10
                        creation_date:
                          type: string
                        recommender_id:
                          type: string
                        rec_status:
                          type: string
                        rec_message:
                          type: string
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                minimum: 1
                              name:
                                type: string
                example:
                  status: success
                  data:
                    - id: 6
                      resource_name: JavaScript tutorial
                      author_name: CodeCademy
                      url: https://www.codecademy.com/learn/jo
                      description: a tutorial
                      content_type: interactive
                      week_no: 1
                      creation_date: "2022-01-06T12:43:27.491Z"
                      recommender_id: 6
                      rec_status: I haven't used this resource but it looks promising
                      rec_message: great stuff
                      tags: [{ id: 1, name: HTML }]
  /resources/{resourceId}:
    get:
      tags:
        - resources
      summary: Get all the resources in the database with their tags and likes
      operationId: getSpecificResource
      parameters:
        - in: path
          name: resourceId
          description: ID of the resource to find comments from
          required: true
          schema:
            type: "integer"
            minimum: 1
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                required:
                  - status
                  - message
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: failed
                  message: Could not find a resource with this id
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          minimum: 1
                        resource_name:
                          type: string
                        author_name:
                          type: string
                        url:
                          type: string
                        description:
                          type: string
                        content_type:
                          type: string
                        week_number:
                          type: integer
                          minimum: 1
                          maximum: 10
                        creation_date:
                          type: string
                        recommender_id:
                          type: integer
                          minimum: 1
                        rec_status:
                          type: string
                        rec_message:
                          type: string
                        name:
                          type: string
                        is_faculty:
                          type: boolean
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                minimum: 1
                              name:
                                type: string
                        likes:
                          type: integer
                        dislikes:
                          type: integer
                example:
                  status: success
                  data:
                    - id: 1
                      resource_name: Test resource
                      author_name: Test author
                      url: https://test
                      description: Test description
                      content_type: article
                      week_no: 6
                      creation_date: "2022-01-05T13:50:59.225Z"
                      recommender_id: 6
                      rec_status: I have not read this resource but it looks promising
                      rec_message: HI test message
                      name: Jo
                      is_faculty: false
                      tags:
                        - id: 1
                          name: HTML
                        - id: 2
                          name: CSS
                        - id: 3
                          name: React
                      likes: 2
                      dislikes: 0
# externalDocs:
#   description: Link to the App
#   url: https://resource-catalogue.netlify.app
# Added by API Auto Mocking Plugin
# host: c3c5-resource-catalogue.herokuapp.com
# Added by API Auto Mocking Plugin
